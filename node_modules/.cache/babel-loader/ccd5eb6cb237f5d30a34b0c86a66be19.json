{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport Web3 from \"web3\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log(\"Connected\");\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log(\"Wallet not found\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var accounts, network, networkId, networkdata, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.ethereum.request({\n                  method: \"eth_requestAccounts\"\n                });\n\n              case 2:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                _context3.next = 7;\n                return window.ethereum.request({\n                  method: \"eth_chainId\"\n                });\n\n              case 7:\n                network = _context3.sent;\n                this.setState({\n                  network: network\n                });\n                networkId = web3.eth.net.getId();\n                networkdata = KryptoBird.networks[networkId];\n\n                if (networkdata) {\n                  abi = KryptoBird.abi;\n                  address = networkdata.address;\n                  contract = new web3.eth.Contract(abi, address);\n                  console.log(contract);\n                }\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"\",\n      network: \"\",\n      contract: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"KryptoBirdz NFT\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.state.account), React.createElement(\"li\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.network))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/aayushsingh/Documents/GitHub/NFT-MarketPlace-KryptoBirdz/src/components/App.js"],"names":["React","Component","detectEthereumProvider","KryptoBird","Web3","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","ethereum","request","method","accounts","setState","account","state","network","networkId","eth","net","getId","networkdata","networks","abi","address","contract","Contract","props","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;IAEMC,G;;;;;;;;;;;;;;;;uBAEQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAGiBL,sBAAsB,E;;;AAAvCM,gBAAAA,Q;;AACN,oBAAGA,QAAH,EAAY;AACRC,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAY,IAAIR,IAAJ,CAASI,QAAT,CAAZ;AACH,iBAHD,MAII;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAGsBC,MAAM,CAACE,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,kBAAAA,MAAM,EAAC;AAAR,iBAAxB,C;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF;AAAT,iBAAd;AACAP,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWD,OAAvB;;uBACsBP,MAAM,CAACE,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,kBAAAA,MAAM,EAAC;AAAR,iBAAxB,C;;;AAAhBK,gBAAAA,O;AACN,qBAAKH,QAAL,CAAc;AAACG,kBAAAA,OAAO,EAACA;AAAT,iBAAd;AACMC,gBAAAA,S,GAAUT,IAAI,CAACU,GAAL,CAASC,GAAT,CAAaC,KAAb,E;AACVC,gBAAAA,W,GAAYtB,UAAU,CAACuB,QAAX,CAAoBL,SAApB,C;;AAClB,oBAAGI,WAAH,EAAe;AACPE,kBAAAA,GADO,GACHxB,UAAU,CAACwB,GADR;AAEPC,kBAAAA,OAFO,GAECH,WAAW,CAACG,OAFb;AAGPC,kBAAAA,QAHO,GAGG,IAAIjB,IAAI,CAACU,GAAL,CAASQ,QAAb,CAAsBH,GAAtB,EAA0BC,OAA1B,CAHH;AAIXnB,kBAAAA,OAAO,CAACC,GAAR,CAAYmB,QAAZ;AACH;;;;;;;;;;;;;;;;;;AAGL,eAAYE,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKZ,KAAL,GAAW;AACPD,MAAAA,OAAO,EAAE,EADF;AAEPE,MAAAA,OAAO,EAAE,EAFF;AAGPS,MAAAA,QAAQ,EAAC;AAHF,KAAX;AAFe;AAOlB;;;;6BAEO;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACG,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAIA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,6DAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKb,KAAL,CAAWD,OADhB,CADJ,EAII;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4B,KAAKC,KAAL,CAAWC,OAAvC,CAJJ,CAJA,CADA,CADJ;AAeH;;;;EAxDanB,S;;AA2DlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport Web3 from \"web3\";\n\nclass App extends Component{\n    async componentDidMount(){\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    async loadWeb3(){\n        const provider = await detectEthereumProvider();\n        if(provider){\n            console.log(\"Connected\")\n            window.web3=new Web3(provider)\n        }\n        else{\n            console.log(\"Wallet not found\")\n        }\n    }\n    async loadBlockchainData(){\n        const accounts = await window.ethereum.request({method:\"eth_requestAccounts\"});\n        this.setState({account:accounts})\n        console.log(this.state.account)\n        const network = await window.ethereum.request({method:\"eth_chainId\"})\n        this.setState({network:network})\n        const networkId=web3.eth.net.getId()\n        const networkdata=KryptoBird.networks[networkId]\n        if(networkdata){\n            var abi=KryptoBird.abi\n            var address=networkdata.address\n            var contract= new web3.eth.Contract(abi,address)\n            console.log(contract)\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={\n            account: \"\",\n            network: \"\",\n            contract:\"\"\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:\"white\"}}>\n                    KryptoBirdz NFT\n                </div>\n            <ul className=\"navbar-nav px-3\">\n                <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block text-white\">\n                    {this.state.account}\n                </li>\n                <li className=\"text-white\">{this.state.network}</li>\n            </ul>\n            </nav>\n            </div>\n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}